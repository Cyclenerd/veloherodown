#!/usr/bin/env bash

#
# Create a local copy of your Velo Hero <http://www.velohero.com/> data.
#
# See instructions at https://github.com/cyclenerd/veloherodown
#

set -e

# script name
PROG=$(basename "$0")
# current timestamp
MY_TIMESTAMP=$(date -u "+%s")
# User-Agent string
MY_USERAGENT="veloherodown/1.1"
# download retry count
DOWNLOAD_RETRIES=3
# download break time to protect server (secs) 
DOWNLOAD_BREAKTIME=1


#####################################################################
# Usage
#####################################################################

function echo_sso_key_help {
	echo
	echo "To use the '$PROG' script, please go to https://app.velohero.com/sso"
	echo "and get yourself a private single sign-on key. That's the long string."
	echo
	echo "Then create a file '$HOME/.veloherorc' containing"
	echo
	echo "----- snip -------------------------------------------------------------"
	echo
	echo "VELOHERO_SSO_KEY=[insert your own]"
	echo
	echo "----- snap -------------------------------------------------------------"
	echo
	echo "Important: Do not use spaces!"
	echo
	exit 1
}

function echo_export_dir_help {
	echo
	echo "Please specify in the file '$HOME/.veloherorc' the location for the export."
	echo
	echo "----- snip -------------------------------------------------------------"
	echo
	echo "VELOHERO_EXPORT_DIR=[specify location for export]"
	echo
	echo "----- snap -------------------------------------------------------------"
	echo
	echo "Important: Do not use spaces!"
	echo
	exit 1
}


#####################################################################
# Terminal output helpers
#####################################################################

# exit_with_failure() outputs a message before exiting the script.
function exit_with_failure() {
	echo
	echo "FAILURE: $1"
	echo
	exit 9
}


#####################################################################
# Other helpers
#####################################################################

# command_exists() tells if a given command exists.
function command_exists() {
	command -v "$1" >/dev/null 2>&1
}

# check_command() check if command exists and exit if not exists
function check_command() {
	if ! command_exists "$1"; then
		exit_with_failure "Command '$1' not found. Please check and install dependency."
	fi
}

# check_sso_login() checks the login
function check_sso_login() {
	if ! curl "https://app.velohero.com/sso" -F sso="$VELOHERO_SSO_KEY" -F view="json" -o "/dev/null" --silent --fail -A "$MY_USERAGENT" --compressed; then
		exit_with_failure "Login failed! Single Sign-on key not found or expired. Please get a new one."
	fi
}

# export_activity() downloads workout to a file in a specific format
#   $1: workout_id
#   $2: export format
#     json: with all details except comments from other users (best export for local backup!)
#     pwx:  Training Peaks PWX file with laps (can be processed by Golden Cheetah)
#     csv:  CSV file
#     gpx:  GPX file (only the geo coordinates)
#     kml:  Google Earth KML file
#     tcx:  Garmin TCX file
function export_activity() { # $1: workoutId, $2: export format
	local WORKOUT_ID="$1" FORMAT="$2"
	local EXPORT_FILE="$VELOHERO_EXPORT_DIR/$WORKOUT_ID.$FORMAT"
	[ -e "$EXPORT_FILE" ] \
	|| curl "https://app.velohero.com/export/activity/$FORMAT/$WORKOUT_ID" -F sso="$VELOHERO_SSO_KEY" -o "$EXPORT_FILE" --fail -A "$MY_USERAGENT" --compressed -C - --retry $DOWNLOAD_RETRIES \
	|| sleep $DOWNLOAD_BREAKTIME skip download if already exists, give server a break after download
}


#####################################################################
# Let's start
#####################################################################

check_command "curl"

# Check the configuration file
if [ ! -f "$HOME/.veloherorc" ]; then
	echo_sso_key_help
fi

# Load configuration file
source "$HOME/.veloherorc"

# Test a few things
[ "$VELOHERO_SSO_KEY" ] || echo_sso_key_help
[ "$VELOHERO_EXPORT_DIR" ] || echo_export_dir_help
[ -d "$VELOHERO_EXPORT_DIR" ] || exit_with_failure "Folder '$VELOHERO_EXPORT_DIR' for exports not found. Please create it."
[ -w "$VELOHERO_EXPORT_DIR" ] || exit_with_failure "Can not write to folder '$VELOHERO_EXPORT_DIR'. Please correct this."

# Get formats to export from commandline
for FORMAT; do
	case "$FORMAT" in
		'json'|'pwx'|'csv'|'gpx'|'kml'|'tcx') [[ ! "$FORMATS" =~ $FORMAT ]] && FORMATS+="$FORMAT " ;;
		*) exit_with_failure "Unknown format '$FORMAT'. Known formats are 'json', 'pwx', 'csv', 'gpx', 'kml' and 'tcx'."
	esac
done; FORMATS="${FORMATS:0:-1}"
[ -z "$FORMATS" ] && FORMATS="json"
echo "Will export data to format"$(set -- $FORMATS && [ $# -gt 1 ] && echo 's')" '$FORMATS'..."

# File with the specification of the last export
VELOHERO_LAST_EXPORT="$VELOHERO_EXPORT_DIR/.velohero_last_export.do_not_remove"
# Get timestamp from last export
if [ -f "$VELOHERO_LAST_EXPORT" ]; then
	source "$VELOHERO_LAST_EXPORT"
else
	if ! echo "VELOHERO_LAST_TIMESTAMP=0" > "$VELOHERO_LAST_EXPORT"; then
		exit_with_failure "Can not write file '$VELOHERO_LAST_EXPORT'. The last download will be noted in this file."
	fi
fi
[ "$VELOHERO_LAST_TIMESTAMP" ] || VELOHERO_LAST_TIMESTAMP=0

# Check login
check_sso_login

# Get list
VELOHERO_EXPORT_LIST="$VELOHERO_EXPORT_DIR/.velohero_export_workouts.csv"
echo "Get list of workouts since $(date -d @$VELOHERO_LAST_TIMESTAMP "+%Y-%m-%d %H:%M:%S"). Please wait..."
if curl "https://app.velohero.com/export/workouts/csv" -F sso="$VELOHERO_SSO_KEY" -F last_change_epoch="$VELOHERO_LAST_TIMESTAMP" -o "$VELOHERO_EXPORT_LIST" --fail -A "$MY_USERAGENT" --compressed; then
	echo >> "$VELOHERO_EXPORT_LIST"	# Add new line
	echo
	trap "rm \"$VELOHERO_EXPORT_LIST\" &> /dev/null" EXIT # schedule cleanup
else
	exit_with_failure "Can not download list of files to be exported."
fi

# Count workouts
declare -i VH_WORKOUT_COUNT=0
while IFS=';' read -r VH_WORKOUT_ID VH_WORKOUT_DATE _ || [[ -n "$VH_WORKOUT_MISC" ]]; do
	[[ "$VH_WORKOUT_ID" =~ ^[0-9]+$ ]] && (( ++VH_WORKOUT_COUNT ))
done <"$VELOHERO_EXPORT_LIST"

if [ "$VH_WORKOUT_COUNT" -eq "0" ]; then
	echo
	echo "Done. No new files."
	echo
	exit
fi

# Download workout file
declare -i VH_DOWNLOAD_COUNT=0
while IFS=';' read -r VH_WORKOUT_ID VH_WORKOUT_DATE VH_WORKOUT_STARTTIME VH_WORKOUT_DURATION _ || [[ -n "$VH_WORKOUT_MISC" ]]; do
	if [[ "$VH_WORKOUT_ID" =~ ^[0-9]+$ ]]; then
		(( ++VH_DOWNLOAD_COUNT ))
		echo "Downloading file $VH_DOWNLOAD_COUNT of $VH_WORKOUT_COUNT with ID $VH_WORKOUT_ID ($VH_WORKOUT_DATE $VH_WORKOUT_STARTTIME). Please wait..."
		# Export
		for FORMAT in $FORMATS; do
			export_activity "$VH_WORKOUT_ID" "$FORMAT"
		done
		echo
	fi
done <"$VELOHERO_EXPORT_LIST"

# Save previous and last export timestamp
echo "VELOHERO_PREV_TIMESTAMP=$VELOHERO_LAST_TIMESTAMP" > "$VELOHERO_LAST_EXPORT"
echo "VELOHERO_LAST_TIMESTAMP=$MY_TIMESTAMP" >> "$VELOHERO_LAST_EXPORT"

echo
echo "Done. All downloaded."
echo
